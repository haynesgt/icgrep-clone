#!/bin/bash

# Script that will compare the outputs of icGrep with correct&tested GNU grep to make sure icGrep output is correct.

# Pairwise tests as generated by the ACTS combinatorial tests tool.
# Tests are in order 1-43 by ordering the "ExtendedRegexOperator" column in ACTS with "false" being on top.
# Format: (flags, 	query, 				testFile(s))
Tests=(
		"" 			"\\*$" 						"TestFiles/EmptyFile1"
		"-i" 		"\\*" 						"TestFiles/EmptyFile1 TestFiles/EmptyFile2"
		"" 			"ψ.*"						"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile1"
		"-i"		"ω"							"TestFiles/NonEmptyFile1"
		"-c"		"\\*lolfff"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"										#5
		"-i -c"		"\\*lolfff"					"TestFiles/EmptyFile1"
		""			"nope\\*No"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i"		"jK\\?.*Jk.*"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"ja\\?"						"TestFiles/NonEmptyFile1"
		"-c"		"\\.jk\\?\\?"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"		#10
		"-i -c"		"\\^\\&"					"TestFiles/NonEmptyFile1"
		"-i -c"		"hello world"				"TestFiles/NonEmptyFile1"
		""			"Nopelolol$"				"TestFiles/EmptyFile1 TestFiles/EmptyFile2"
		"-i -c"		"\\.ja\\?"					"TestFiles/NonEmptyFile1"
		""			"jk\\?.*jk.*"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"		#15
		"-i -c"		""							"TestFiles/EmptyFile1"
		"-i -c"		"δε.*τυ"					"TestFiles/NonEmptyFile1"


		# Ones with Extended Regex operators.
		"-i -c"		"\\*\p{Greek}"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"\p{Lu}.*\\*.*\p{Greek}"	"TestFiles/NonEmptyFile1"
		"-i -c"		"nope\p{Greek}"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"											#20
		""			"nope\p{Greek}"				"TestFiles/EmptyFile1 TestFiles/EmptyFile2"
		"-i"		"\\$.*\p{Lu}.*5$"			"TestFiles/NonEmptyFile1"
		"-i -c"		"\\$.*\p{Lu}"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Lu}.*\\^蕉香蕉aAaσ5"		"TestFiles/NonEmptyFile1"
		""			"\p{Lu}\\^蕉"				"TestFiles/EmptyFile1 TestFiles/EmptyFile2"				#25
		""			"\p{Greek}nope$"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Latin}\\?"				"TestFiles/EmptyFile1"
		""			"\p{Lu}\\.\\?"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"\p{Greek}.*\\?\\*[0-9]"	"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i"		"\p{Lu}\\.\\?"				"TestFiles/EmptyFile1 TestFiles/EmptyFile2"				#30
		""			"\p{Lu}蕉香蕉aAaσ"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Lu}.*香.*\p{Greek}"		"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"\p{Greek}\\&.*"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"\p{Greek}\\&.*"			"TestFiles/EmptyFile1"
		""			"\p{Lu}"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"\p{Latin}蕉香蕉"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"\p{Greek}νάνα"				"TestFiles/NonEmptyFile1"
		"-i"		"\p{Greek}νάνα"				"TestFiles/EmptyFile1"
		"-c"		"^\p{Armenian}$"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Lu}\\^"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"\p{Lu}.*\\^.*\p{Armenian}"	"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"My.*\\*.*\p{Greek}$"		"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"




		# Old tests (Before modifying the partitions in ACT)
		"" 			"\\*." 						"TestFiles/NonEmptyFile1"
		"-i" 		"\\*" 						"TestFiles/EmptyFile1 TestFiles/EmptyFile2"
		"" 			"haz lo?l"  				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"" 			"q"  						"TestFiles/NonEmptyFile1"
		"-i" 		"Q"  						"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"					# Test 5
		"-i -c" 	"\\.Jk.*"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i"		"nope\\*No"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"jK\\?.*Jk"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"ja\\?"						"TestFiles/NonEmptyFile1"
		"-i -c"		"JK.\\?"					"TestFiles/EmptyFile1 TestFiles/EmptyFile2"			# Test 10
		""			"\\[0-9]"					"TestFiles/NonEmptyFile1"
		""			"unix"						"TestFiles/NonEmptyFile1"
		"-i -c"		"nop.*a$"					"TestFiles/EmptyFile1 TestFiles/EmptyFile2"
		"" 			"\\.ja\\?"					"TestFiles/NonEmptyFile1"
		"-i -c"		"\\.NOPE\\?"				"TestFiles/EmptyFile1 TestFiles/EmptyFile2"			# Test 15
		""			""							"TestFiles/EmptyFile1"
		"-i"		"δε.*τυ"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"你好香蕉"					"TestFiles/NonEmptyFile1"
		""			"香蕉"						"TestFiles/EmptyFile1"
		"-i -c"		".*[a-z]"					"TestFiles/EmptyFile1 TestFiles/EmptyFile2"			# Test 20
		"-i"		"z$"						"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		""			"\\.LLL"					"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"

		# Tests involving Extended regular expressions like \p{Greek}
		"-i -c"		"\\*\p{Greek}"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i"		"\p{Lu}.*\\*" 				"TestFiles/NonEmptyFile1"
		"-i -c"		"Q\p{Latin}"				"TestFiles/EmptyFile1"								# Test 25
		""			"\p{Latin}Q"				"TestFiles/EmptyFile1 TestFiles/EmptyFile2"			
		"-i"		"\\$.*\p{Lu}.*\p{Greek}"	"TestFiles/NonEmptyFile1"
		"-i -c"		"\\$.*\p{Lu}"				"TestFiles/EmptyFile1"
		""			"\p{Lu}.*\\^.*\p{Greek}"	"TestFiles/NonEmptyFile1"
		"-i"		"\p{Lu}.*\\^.*\p{Greek}"	"TestFiles/EmptyFile1 TestFiles/EmptyFile2"			# Test 30
		"-c"		"\p{Lu}jk.*\\*$"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Lu}.*\p{Latin}.*\\*$"	"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"\\^\p{Lu}trolol$"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Lu}.*\\*\p{Greek}"		"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\\^\p{L}"					"TestFiles/EmptyFile1 TestFiles/EmptyFile2"			# Test 35
		"-c"		"\p{L}asdasd"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"^\p{Lu}.*σω"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i"		"\p{L}\\*.?ada"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i -c"		"\p{Lu}.*\\^蕉香蕉aAaσ$"		"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"\p{L}"						"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"									# Test 40
		"-i -c"		"^\p{Greek}.*蕉香蕉"			"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-i"		"^\p{L}.*\\$"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
		"-c"		"^\p{L}\\.Aaσ$"				"TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"



		# More complex tests:
		""			"^[a-z0-9_-]{3,16}$"													"TestFiles/complexTests"	# Testing 
		""			"^[a-z0-9_-]{6,18}$"													"TestFiles/complexTests"
		""			"^#?([a-f0-9]{6}|[a-f0-9]{3})$"											"TestFiles/complexTests"
		""			"^[a-z0-9-]+$"															"TestFiles/complexTests"
		""			"^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$"						"TestFiles/complexTests"
		""			"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$"		"TestFiles/complexTests"
		# ""			"^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$"								"TestFiles/complexTests"	#
		""			"<([A-Z][A-Z0-9]*)\b[^>]*>.*?</\1>"										"TestFiles/complexTests"	# test back-referencing.
		""			"<([a-zA-Z][a-zA-Z0-9]*)>.*</\1>"										"TestFiles/complexTests"	# test back-referencing.


		# "" "hello world" "TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"		#sample tests.
	 	# "" "\p{Greek}" "TestFiles/NonEmptyFile1 TestFiles/NonEmptyFile2"
	   )

# Empty the ExpectedOutputFiles and OutputFiles folders.
rm ExpectedOutputFiles/*
rm OutputFiles/*

tLen=${#Tests[@]}	#Size of the Tests list.
NumOfParametersPerTest=3	# Each test has 3 parameters in the array above.
TEST_NUM=0
AllPassed=true
while [  $TEST_NUM -lt $tLen ]; do
	# echo Test \#$((TEST_NUM / NumOfParametersPerTest))

	# Generate the valid output using the "correct" GNU grep program.
	validOutputFile="ExpectedOutputFiles/ValidOutputNum_$((TEST_NUM/NumOfParametersPerTest)).txt"
	if [ "${Tests[$((TEST_NUM+2))]}" == "" ]; then
		touch $validOutputFile			# GNU grep goes into interactive mode if no file are provided. So just make an empty valid file.
	else
		grep -P ${Tests[$TEST_NUM]} "${Tests[$((TEST_NUM+1))]}" ${Tests[$((TEST_NUM+2))]} > $validOutputFile
	fi

	# Create the icGrep output file.
	outputFile="OutputFiles/TestOutputNum_$((TEST_NUM/NumOfParametersPerTest)).txt"
	$1 ${Tests[$TEST_NUM]} "${Tests[$((TEST_NUM+1))]}" ${Tests[$((TEST_NUM+2))]} > $outputFile

	# Compare the icGrep output with the valid GNU Grep output.
	diff $outputFile $validOutputFile
	if [ $? = 0 ]; then
	        echo Test \#$((TEST_NUM / NumOfParametersPerTest)) Passed.
	else
			echo Test \#$((TEST_NUM / NumOfParametersPerTest)) Failed: Query "${Tests[$((TEST_NUM+1))]}"\; on file: "${Tests[$((TEST_NUM+2))]}".
			$AllPassed=false
	fi

	# echo ${outputFile}
	# Increment 
	let TEST_NUM=TEST_NUM+$NumOfParametersPerTest
done

echo "Did all pass? :" $AllPassed


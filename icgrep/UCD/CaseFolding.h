#ifndef CASEFOLDING_H
#define CASEFOLDING_H
/*
 *  Copyright (c) 2017 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by casefold.py - manual edits may be lost.
 */

#include "PropertyAliases.h"
#include "PropertyObjects.h"
#include "PropertyValueAliases.h"
#include "unicode_set.h"
#include <vector>

struct FoldEntry {
    const UCD::codepoint_t range_lo;
    const int fold_offset;
    const std::vector<UCD::interval_t> fold_pairs;
};


UCD::UnicodeSet caseInsensitize(const UCD::UnicodeSet & cc);

const int foldTableSize = 246;

const FoldEntry foldTable[foldTableSize] = {
  {0x0, 0, {}},
  {0x41, 32, {{0x4b, 0x212a}, {0x53, 0x17f}}},
  {0x5b, 0, {}},
  {0x61, -32, {{0x6b, 0x212a}, {0x73, 0x17f}}},
  {0x7b, 0, {{0xb5, 0x3bc}, {0xb5, 0x39c}}},
  {0xc0, 32, {{0xc5, 0x212b}}},
  {0xd7, 0, {}},
  {0xd8, 32, {}},
  {0xdf, 0, {{0xdf, 0x1e9e}}},
  {0xe0, -32, {{0xe5, 0x212b}}},
  {0xf7, 0, {}},
  {0xf8, -32, {}},
  {0xff, 0, {{0xff, 0x178}}},
  {0x100, 1, {}},
  {0x130, 0, {}},
  {0x132, 1, {}},
  {0x138, 0, {}},
  {0x139, 1, {}},
  {0x149, 0, {}},
  {0x14a, 1, {}},
  {0x178, 0, {{0x178, 0xff}}},
  {0x179, 1, {}},
  {0x17f, 0, {{0x17f, 0x73}, {0x17f, 0x53}, {0x180, 0x243}, {0x181, 0x253}}},
  {0x182, 1, {}},
  {0x186, 0, {{0x186, 0x254}}},
  {0x187, 1, {}},
  {0x189, 205, {}},
  {0x18b, 1, {}},
  {0x18d, 0, {{0x18e, 0x1dd}, {0x18f, 0x259}, {0x190, 0x25b}}},
  {0x191, 1, {}},
  {0x193, 0, {{0x193, 0x260}, {0x194, 0x263}, {0x195, 0x1f6}, {0x196, 0x269},
    {0x197, 0x268}}},
  {0x198, 1, {}},
  {0x19a, 0, {{0x19a, 0x23d}, {0x19c, 0x26f}, {0x19d, 0x272}, {0x19e, 0x220},
    {0x19f, 0x275}}},
  {0x1a0, 1, {}},
  {0x1a6, 0, {{0x1a6, 0x280}}},
  {0x1a7, 1, {}},
  {0x1a9, 0, {{0x1a9, 0x283}}},
  {0x1ac, 1, {}},
  {0x1ae, 0, {{0x1ae, 0x288}}},
  {0x1af, 1, {}},
  {0x1b1, 217, {}},
  {0x1b3, 1, {}},
  {0x1b7, 0, {{0x1b7, 0x292}}},
  {0x1b8, 1, {}},
  {0x1ba, 0, {}},
  {0x1bc, 1, {}},
  {0x1be, 0, {{0x1bf, 0x1f7}}},
  {0x1c4, 1, {{0x1c4, 0x1c6}}},
  {0x1c6, 0, {}},
  {0x1c5, 1, {{0x1c6, 0x1c4}, {0x1c7, 0x1c9}}},
  {0x1c9, 0, {}},
  {0x1c8, 1, {{0x1c9, 0x1c7}, {0x1ca, 0x1cc}}},
  {0x1cc, 0, {}},
  {0x1cb, 1, {{0x1cc, 0x1ca}}},
  {0x1dd, 0, {{0x1dd, 0x18e}}},
  {0x1de, 1, {}},
  {0x1f0, 0, {}},
  {0x1f1, 1, {{0x1f1, 0x1f3}}},
  {0x1f3, 0, {}},
  {0x1f2, 1, {{0x1f3, 0x1f1}}},
  {0x1f6, 0, {{0x1f6, 0x195}, {0x1f7, 0x1bf}}},
  {0x1f8, 1, {}},
  {0x220, 0, {{0x220, 0x19e}}},
  {0x222, 1, {}},
  {0x234, 0, {{0x23a, 0x2c65}}},
  {0x23b, 1, {}},
  {0x23d, 0, {{0x23d, 0x19a}, {0x23e, 0x2c66}}},
  {0x23f, 10815, {}},
  {0x241, 1, {}},
  {0x243, 0, {{0x243, 0x180}, {0x244, 0x289}, {0x245, 0x28c}}},
  {0x246, 1, {}},
  {0x250, 0, {{0x250, 0x2c6f}, {0x251, 0x2c6d}, {0x252, 0x2c70}, {0x253, 0x181},
    {0x254, 0x186}}},
  {0x256, -205, {}},
  {0x258, 0, {{0x259, 0x18f}, {0x25b, 0x190}, {0x25c, 0xa7ab}, {0x260, 0x193},
    {0x261, 0xa7ac}, {0x263, 0x194}, {0x265, 0xa78d}, {0x266, 0xa7aa},
    {0x268, 0x197}, {0x269, 0x196}, {0x26a, 0xa7ae}, {0x26b, 0x2c62},
    {0x26c, 0xa7ad}, {0x26f, 0x19c}, {0x271, 0x2c6e}, {0x272, 0x19d},
    {0x275, 0x19f}, {0x27d, 0x2c64}, {0x280, 0x1a6}, {0x283, 0x1a9},
    {0x287, 0xa7b1}, {0x288, 0x1ae}, {0x289, 0x244}}},
  {0x28a, -217, {}},
  {0x28c, 0, {{0x28c, 0x245}, {0x292, 0x1b7}, {0x29d, 0xa7b2}, {0x29e, 0xa7b0},
    {0x345, 0x3b9}, {0x345, 0x399}, {0x345, 0x1fbe}}},
  {0x370, 1, {}},
  {0x374, 0, {}},
  {0x376, 1, {}},
  {0x378, 0, {}},
  {0x37b, 130, {}},
  {0x37e, 0, {{0x37f, 0x3f3}, {0x386, 0x3ac}}},
  {0x388, 37, {}},
  {0x38b, 0, {{0x38c, 0x3cc}}},
  {0x38e, 63, {}},
  {0x390, 0, {}},
  {0x391, 32, {{0x392, 0x3d0}, {0x395, 0x3f5}, {0x398, 0x3d1}, {0x398, 0x3f4},
    {0x399, 0x345}, {0x399, 0x1fbe}, {0x39a, 0x3f0}, {0x39c, 0xb5},
    {0x3a0, 0x3d6}, {0x3a1, 0x3f1}}},
  {0x3a2, 0, {}},
  {0x3a3, 32, {{0x3a3, 0x3c2}, {0x3a6, 0x3d5}, {0x3a9, 0x2126}}},
  {0x3ac, 0, {{0x3ac, 0x386}}},
  {0x3ad, -37, {}},
  {0x3b0, 0, {}},
  {0x3b1, -32, {{0x3b2, 0x3d0}, {0x3b5, 0x3f5}, {0x3b8, 0x3d1}, {0x3b8, 0x3f4},
    {0x3b9, 0x345}, {0x3b9, 0x1fbe}, {0x3ba, 0x3f0}, {0x3bc, 0xb5},
    {0x3c0, 0x3d6}, {0x3c1, 0x3f1}}},
  {0x3c2, 1, {{0x3c2, 0x3a3}}},
  {0x3c4, 0, {}},
  {0x3c3, -32, {{0x3c6, 0x3d5}, {0x3c9, 0x2126}}},
  {0x3cc, 0, {{0x3cc, 0x38c}}},
  {0x3cd, -63, {}},
  {0x3cf, 0, {{0x3cf, 0x3d7}, {0x3d0, 0x3b2}, {0x3d0, 0x392}, {0x3d1, 0x3b8},
    {0x3d1, 0x398}, {0x3d1, 0x3f4}, {0x3d5, 0x3c6}, {0x3d5, 0x3a6},
    {0x3d6, 0x3c0}, {0x3d6, 0x3a0}, {0x3d7, 0x3cf}}},
  {0x3d8, 1, {}},
  {0x3f0, 0, {{0x3f0, 0x3ba}, {0x3f0, 0x39a}, {0x3f1, 0x3c1}, {0x3f1, 0x3a1},
    {0x3f2, 0x3f9}, {0x3f3, 0x37f}, {0x3f4, 0x3b8}, {0x3f4, 0x398},
    {0x3f4, 0x3d1}, {0x3f5, 0x3b5}, {0x3f5, 0x395}}},
  {0x3f7, 1, {}},
  {0x3f9, 0, {{0x3f9, 0x3f2}}},
  {0x3fa, 1, {}},
  {0x3fc, 0, {}},
  {0x3fd, -130, {}},
  {0x400, 80, {}},
  {0x410, 0, {{0x412, 0x1c80}, {0x414, 0x1c81}, {0x41e, 0x1c82}}},
  {0x421, 6242, {{0x422, 0x1c85}}},
  {0x423, 0, {{0x42a, 0x1c86}, {0x432, 0x1c80}, {0x434, 0x1c81}, {0x43e, 0x1c82}}},
  {0x441, 6210, {{0x442, 0x1c85}}},
  {0x443, 0, {}},
  {0x410, 32, {{0x412, 0x1c80}, {0x414, 0x1c81}, {0x41e, 0x1c82}, {0x422, 0x1c85},
    {0x42a, 0x1c86}, {0x432, 0x1c80}, {0x434, 0x1c81}, {0x43e, 0x1c82},
    {0x442, 0x1c85}, {0x44a, 0x1c86}}},
  {0x450, -80, {}},
  {0x460, 1, {{0x462, 0x1c87}, {0x463, 0x1c87}}},
  {0x482, 0, {}},
  {0x48a, 1, {}},
  {0x4c0, 0, {{0x4c0, 0x4cf}}},
  {0x4c1, 1, {}},
  {0x4cf, 0, {{0x4cf, 0x4c0}}},
  {0x4d0, 1, {}},
  {0x530, 0, {}},
  {0x531, 48, {}},
  {0x557, 0, {}},
  {0x561, -48, {}},
  {0x587, 0, {}},
  {0x10a0, 7264, {}},
  {0x10c6, 0, {{0x10c7, 0x2d27}, {0x10cd, 0x2d2d}}},
  {0x13a0, 38864, {}},
  {0x13f0, 8, {}},
  {0x13f6, 0, {}},
  {0x13f8, -8, {}},
  {0x13fe, 0, {{0x1c80, 0x432}, {0x1c80, 0x412}, {0x1c81, 0x434}, {0x1c81, 0x414},
    {0x1c82, 0x43e}, {0x1c82, 0x41e}}},
  {0x1c83, -6210, {}},
  {0x1c85, 0, {}},
  {0x1c83, -6242, {}},
  {0x1c85, 0, {}},
  {0x1c84, 1, {{0x1c85, 0x442}, {0x1c85, 0x422}}},
  {0x1c86, 0, {{0x1c86, 0x44a}, {0x1c86, 0x42a}, {0x1c87, 0x463}, {0x1c87, 0x462},
    {0x1c88, 0xa64b}, {0x1c88, 0xa64a}, {0x1d79, 0xa77d}, {0x1d7d, 0x2c63}}},
  {0x1e00, 1, {{0x1e60, 0x1e9b}, {0x1e61, 0x1e9b}}},
  {0x1e96, 0, {{0x1e9b, 0x1e61}, {0x1e9b, 0x1e60}, {0x1e9e, 0xdf}}},
  {0x1ea0, 1, {}},
  {0x1f00, 8, {}},
  {0x1f16, 0, {}},
  {0x1f18, -8, {}},
  {0x1f1e, 0, {}},
  {0x1f20, 8, {}},
  {0x1f46, 0, {}},
  {0x1f48, -8, {}},
  {0x1f4e, 0, {{0x1f51, 0x1f59}, {0x1f53, 0x1f5b}, {0x1f55, 0x1f5d}, {0x1f57, 0x1f5f},
    {0x1f59, 0x1f51}, {0x1f5b, 0x1f53}, {0x1f5d, 0x1f55}, {0x1f5f, 0x1f57}}},
  {0x1f60, 8, {}},
  {0x1f70, 74, {}},
  {0x1f72, 86, {}},
  {0x1f76, 100, {}},
  {0x1f78, 128, {}},
  {0x1f7a, 112, {}},
  {0x1f7c, 126, {}},
  {0x1f7e, 0, {}},
  {0x1f80, 8, {}},
  {0x1fb2, 0, {{0x1fb3, 0x1fbc}}},
  {0x1fb8, -8, {}},
  {0x1fba, -74, {}},
  {0x1fbc, 0, {{0x1fbc, 0x1fb3}, {0x1fbe, 0x3b9}, {0x1fbe, 0x345}, {0x1fbe, 0x399},
    {0x1fc3, 0x1fcc}}},
  {0x1fc8, -86, {}},
  {0x1fcc, 0, {{0x1fcc, 0x1fc3}}},
  {0x1fd0, 8, {}},
  {0x1fd2, 0, {}},
  {0x1fd8, -8, {}},
  {0x1fda, -100, {}},
  {0x1fdc, 0, {}},
  {0x1fe0, 8, {}},
  {0x1fe2, 0, {{0x1fe5, 0x1fec}}},
  {0x1fe8, -8, {}},
  {0x1fea, -112, {}},
  {0x1fec, 0, {{0x1fec, 0x1fe5}, {0x1ff3, 0x1ffc}}},
  {0x1ff8, -128, {}},
  {0x1ffa, -126, {}},
  {0x1ffc, 0, {{0x1ffc, 0x1ff3}, {0x2126, 0x3c9}, {0x2126, 0x3a9}, {0x212a, 0x6b},
    {0x212a, 0x4b}, {0x212b, 0xe5}, {0x212b, 0xc5}, {0x2132, 0x214e},
    {0x214e, 0x2132}}},
  {0x2160, 16, {}},
  {0x2180, 0, {}},
  {0x2183, 1, {}},
  {0x2185, 0, {}},
  {0x24b6, 26, {}},
  {0x24ea, 0, {}},
  {0x2c00, 48, {}},
  {0x2c2f, 0, {}},
  {0x2c30, -48, {}},
  {0x2c5f, 0, {}},
  {0x2c60, 1, {}},
  {0x2c62, 0, {{0x2c62, 0x26b}, {0x2c63, 0x1d7d}, {0x2c64, 0x27d}, {0x2c65, 0x23a},
    {0x2c66, 0x23e}}},
  {0x2c67, 1, {}},
  {0x2c6d, 0, {{0x2c6d, 0x251}, {0x2c6e, 0x271}, {0x2c6f, 0x250}, {0x2c70, 0x252}}},
  {0x2c72, 1, {}},
  {0x2c74, 0, {}},
  {0x2c75, 1, {}},
  {0x2c77, 0, {}},
  {0x2c7e, -10815, {}},
  {0x2c80, 1, {}},
  {0x2ce4, 0, {}},
  {0x2ceb, 1, {}},
  {0x2cef, 0, {}},
  {0x2cf2, 1, {}},
  {0x2cf4, 0, {}},
  {0x2d00, -7264, {}},
  {0x2d26, 0, {{0x2d27, 0x10c7}, {0x2d2d, 0x10cd}}},
  {0xa640, 1, {{0xa64a, 0x1c88}, {0xa64b, 0x1c88}}},
  {0xa66e, 0, {}},
  {0xa680, 1, {}},
  {0xa69c, 0, {}},
  {0xa722, 1, {}},
  {0xa730, 0, {}},
  {0xa732, 1, {}},
  {0xa770, 0, {}},
  {0xa779, 1, {}},
  {0xa77d, 0, {{0xa77d, 0x1d79}}},
  {0xa77e, 1, {}},
  {0xa788, 0, {}},
  {0xa78b, 1, {}},
  {0xa78d, 0, {{0xa78d, 0x265}}},
  {0xa790, 1, {}},
  {0xa794, 0, {}},
  {0xa796, 1, {}},
  {0xa7aa, 0, {{0xa7aa, 0x266}, {0xa7ab, 0x25c}, {0xa7ac, 0x261}, {0xa7ad, 0x26c},
    {0xa7ae, 0x26a}, {0xa7b0, 0x29e}, {0xa7b1, 0x287}, {0xa7b2, 0x29d},
    {0xa7b3, 0xab53}}},
  {0xa7b4, 1, {}},
  {0xa7b8, 0, {{0xab53, 0xa7b3}}},
  {0xab70, -38864, {}},
  {0xabc0, 0, {}},
  {0xff21, 32, {}},
  {0xff3b, 0, {}},
  {0xff41, -32, {}},
  {0xff5b, 0, {}},
  {0x10400, 40, {}},
  {0x10450, 0, {}},
  {0x104b0, 40, {}},
  {0x104d4, 0, {}},
  {0x104d8, -40, {}},
  {0x104fc, 0, {}},
  {0x10c80, 64, {}},
  {0x10cb3, 0, {}},
  {0x10cc0, -64, {}},
  {0x10cf3, 0, {}},
  {0x118a0, 32, {}},
  {0x118e0, 0, {}},
  {0x1e900, 34, {}},
  {0x1e944, 0, {}},
  {0x110000, 0, {}}};
namespace UCD {
    namespace SCF_ns {
        /** Code Point Ranges for scf mapping to <none>
        **/
        
        
        namespace {
        const static UnicodeSet::run_t __null_codepoint_set_runs[] = {
        {Empty, 34816}};
        const static UnicodeSet::bitquad_t * const __null_codepoint_set_quads = nullptr;
        }

        const static UnicodeSet null_codepoint_set{const_cast<UnicodeSet::run_t *>(__null_codepoint_set_runs), 1, 0, const_cast<UnicodeSet::bitquad_t *>(__null_codepoint_set_quads), 0, 0};



        /** Code Point Ranges for scf mapping to <codepoint>
        [0000, 0040], [005b, 00b4], [00b6, 00bf], [00d7, 00d7],
        [00df, 00ff], [0101, 0101], [0103, 0103], [0105, 0105],
        [0107, 0107], [0109, 0109], [010b, 010b], [010d, 010d],
        [010f, 010f], [0111, 0111], [0113, 0113], [0115, 0115],
        [0117, 0117], [0119, 0119], [011b, 011b], [011d, 011d],
        [011f, 011f], [0121, 0121], [0123, 0123], [0125, 0125],
        [0127, 0127], [0129, 0129], [012b, 012b], [012d, 012d],
        [012f, 0131], [0133, 0133], [0135, 0135], [0137, 0138],
        [013a, 013a], [013c, 013c], [013e, 013e], [0140, 0140],
        [0142, 0142], [0144, 0144], [0146, 0146], [0148, 0149],
        [014b, 014b], [014d, 014d], [014f, 014f], [0151, 0151],
        [0153, 0153], [0155, 0155], [0157, 0157], [0159, 0159],
        [015b, 015b], [015d, 015d], [015f, 015f], [0161, 0161],
        [0163, 0163], [0165, 0165], [0167, 0167], [0169, 0169],
        [016b, 016b], [016d, 016d], [016f, 016f], [0171, 0171],
        [0173, 0173], [0175, 0175], [0177, 0177], [017a, 017a],
        [017c, 017c], [017e, 017e], [0180, 0180], [0183, 0183],
        [0185, 0185], [0188, 0188], [018c, 018d], [0192, 0192],
        [0195, 0195], [0199, 019b], [019e, 019e], [01a1, 01a1],
        [01a3, 01a3], [01a5, 01a5], [01a8, 01a8], [01aa, 01ab],
        [01ad, 01ad], [01b0, 01b0], [01b4, 01b4], [01b6, 01b6],
        [01b9, 01bb], [01bd, 01c3], [01c6, 01c6], [01c9, 01c9],
        [01cc, 01cc], [01ce, 01ce], [01d0, 01d0], [01d2, 01d2],
        [01d4, 01d4], [01d6, 01d6], [01d8, 01d8], [01da, 01da],
        [01dc, 01dd], [01df, 01df], [01e1, 01e1], [01e3, 01e3],
        [01e5, 01e5], [01e7, 01e7], [01e9, 01e9], [01eb, 01eb],
        [01ed, 01ed], [01ef, 01f0], [01f3, 01f3], [01f5, 01f5],
        [01f9, 01f9], [01fb, 01fb], [01fd, 01fd], [01ff, 01ff],
        [0201, 0201], [0203, 0203], [0205, 0205], [0207, 0207],
        [0209, 0209], [020b, 020b], [020d, 020d], [020f, 020f],
        [0211, 0211], [0213, 0213], [0215, 0215], [0217, 0217],
        [0219, 0219], [021b, 021b], [021d, 021d], [021f, 021f],
        [0221, 0221], [0223, 0223], [0225, 0225], [0227, 0227],
        [0229, 0229], [022b, 022b], [022d, 022d], [022f, 022f],
        [0231, 0231], [0233, 0239], [023c, 023c], [023f, 0240],
        [0242, 0242], [0247, 0247], [0249, 0249], [024b, 024b],
        [024d, 024d], [024f, 0344], [0346, 036f], [0371, 0371],
        [0373, 0375], [0377, 037e], [0380, 0385], [0387, 0387],
        [038b, 038b], [038d, 038d], [0390, 0390], [03a2, 03a2],
        [03ac, 03c1], [03c3, 03ce], [03d2, 03d4], [03d7, 03d7],
        [03d9, 03d9], [03db, 03db], [03dd, 03dd], [03df, 03df],
        [03e1, 03e1], [03e3, 03e3], [03e5, 03e5], [03e7, 03e7],
        [03e9, 03e9], [03eb, 03eb], [03ed, 03ed], [03ef, 03ef],
        [03f2, 03f3], [03f6, 03f6], [03f8, 03f8], [03fb, 03fc],
        [0430, 045f], [0461, 0461], [0463, 0463], [0465, 0465],
        [0467, 0467], [0469, 0469], [046b, 046b], [046d, 046d],
        [046f, 046f], [0471, 0471], [0473, 0473], [0475, 0475],
        [0477, 0477], [0479, 0479], [047b, 047b], [047d, 047d],
        [047f, 047f], [0481, 0489], [048b, 048b], [048d, 048d],
        [048f, 048f], [0491, 0491], [0493, 0493], [0495, 0495],
        [0497, 0497], [0499, 0499], [049b, 049b], [049d, 049d],
        [049f, 049f], [04a1, 04a1], [04a3, 04a3], [04a5, 04a5],
        [04a7, 04a7], [04a9, 04a9], [04ab, 04ab], [04ad, 04ad],
        [04af, 04af], [04b1, 04b1], [04b3, 04b3], [04b5, 04b5],
        [04b7, 04b7], [04b9, 04b9], [04bb, 04bb], [04bd, 04bd],
        [04bf, 04bf], [04c2, 04c2], [04c4, 04c4], [04c6, 04c6],
        [04c8, 04c8], [04ca, 04ca], [04cc, 04cc], [04ce, 04cf],
        [04d1, 04d1], [04d3, 04d3], [04d5, 04d5], [04d7, 04d7],
        [04d9, 04d9], [04db, 04db], [04dd, 04dd], [04df, 04df],
        [04e1, 04e1], [04e3, 04e3], [04e5, 04e5], [04e7, 04e7],
        [04e9, 04e9], [04eb, 04eb], [04ed, 04ed], [04ef, 04ef],
        [04f1, 04f1], [04f3, 04f3], [04f5, 04f5], [04f7, 04f7],
        [04f9, 04f9], [04fb, 04fb], [04fd, 04fd], [04ff, 04ff],
        [0501, 0501], [0503, 0503], [0505, 0505], [0507, 0507],
        [0509, 0509], [050b, 050b], [050d, 050d], [050f, 050f],
        [0511, 0511], [0513, 0513], [0515, 0515], [0517, 0517],
        [0519, 0519], [051b, 051b], [051d, 051d], [051f, 051f],
        [0521, 0521], [0523, 0523], [0525, 0525], [0527, 0527],
        [0529, 0529], [052b, 052b], [052d, 052d], [052f, 0530],
        [0557, 109f], [10c6, 10c6], [10c8, 10cc], [10ce, 13f7],
        [13fe, 1c7f], [1c89, 1dff], [1e01, 1e01], [1e03, 1e03],
        [1e05, 1e05], [1e07, 1e07], [1e09, 1e09], [1e0b, 1e0b],
        [1e0d, 1e0d], [1e0f, 1e0f], [1e11, 1e11], [1e13, 1e13],
        [1e15, 1e15], [1e17, 1e17], [1e19, 1e19], [1e1b, 1e1b],
        [1e1d, 1e1d], [1e1f, 1e1f], [1e21, 1e21], [1e23, 1e23],
        [1e25, 1e25], [1e27, 1e27], [1e29, 1e29], [1e2b, 1e2b],
        [1e2d, 1e2d], [1e2f, 1e2f], [1e31, 1e31], [1e33, 1e33],
        [1e35, 1e35], [1e37, 1e37], [1e39, 1e39], [1e3b, 1e3b],
        [1e3d, 1e3d], [1e3f, 1e3f], [1e41, 1e41], [1e43, 1e43],
        [1e45, 1e45], [1e47, 1e47], [1e49, 1e49], [1e4b, 1e4b],
        [1e4d, 1e4d], [1e4f, 1e4f], [1e51, 1e51], [1e53, 1e53],
        [1e55, 1e55], [1e57, 1e57], [1e59, 1e59], [1e5b, 1e5b],
        [1e5d, 1e5d], [1e5f, 1e5f], [1e61, 1e61], [1e63, 1e63],
        [1e65, 1e65], [1e67, 1e67], [1e69, 1e69], [1e6b, 1e6b],
        [1e6d, 1e6d], [1e6f, 1e6f], [1e71, 1e71], [1e73, 1e73],
        [1e75, 1e75], [1e77, 1e77], [1e79, 1e79], [1e7b, 1e7b],
        [1e7d, 1e7d], [1e7f, 1e7f], [1e81, 1e81], [1e83, 1e83],
        [1e85, 1e85], [1e87, 1e87], [1e89, 1e89], [1e8b, 1e8b],
        [1e8d, 1e8d], [1e8f, 1e8f], [1e91, 1e91], [1e93, 1e93],
        [1e95, 1e9a], [1e9c, 1e9d], [1e9f, 1e9f], [1ea1, 1ea1],
        [1ea3, 1ea3], [1ea5, 1ea5], [1ea7, 1ea7], [1ea9, 1ea9],
        [1eab, 1eab], [1ead, 1ead], [1eaf, 1eaf], [1eb1, 1eb1],
        [1eb3, 1eb3], [1eb5, 1eb5], [1eb7, 1eb7], [1eb9, 1eb9],
        [1ebb, 1ebb], [1ebd, 1ebd], [1ebf, 1ebf], [1ec1, 1ec1],
        [1ec3, 1ec3], [1ec5, 1ec5], [1ec7, 1ec7], [1ec9, 1ec9],
        [1ecb, 1ecb], [1ecd, 1ecd], [1ecf, 1ecf], [1ed1, 1ed1],
        [1ed3, 1ed3], [1ed5, 1ed5], [1ed7, 1ed7], [1ed9, 1ed9],
        [1edb, 1edb], [1edd, 1edd], [1edf, 1edf], [1ee1, 1ee1],
        [1ee3, 1ee3], [1ee5, 1ee5], [1ee7, 1ee7], [1ee9, 1ee9],
        [1eeb, 1eeb], [1eed, 1eed], [1eef, 1eef], [1ef1, 1ef1],
        [1ef3, 1ef3], [1ef5, 1ef5], [1ef7, 1ef7], [1ef9, 1ef9],
        [1efb, 1efb], [1efd, 1efd], [1eff, 1f07], [1f10, 1f17],
        [1f1e, 1f27], [1f30, 1f37], [1f40, 1f47], [1f4e, 1f58],
        [1f5a, 1f5a], [1f5c, 1f5c], [1f5e, 1f5e], [1f60, 1f67],
        [1f70, 1f87], [1f90, 1f97], [1fa0, 1fa7], [1fb0, 1fb7],
        [1fbd, 1fbd], [1fbf, 1fc7], [1fcd, 1fd7], [1fdc, 1fe7],
        [1fed, 1ff7], [1ffd, 2125], [2127, 2129], [212c, 2131],
        [2133, 215f], [2170, 2182], [2184, 24b5], [24d0, 2bff],
        [2c2f, 2c5f], [2c61, 2c61], [2c65, 2c66], [2c68, 2c68],
        [2c6a, 2c6a], [2c6c, 2c6c], [2c71, 2c71], [2c73, 2c74],
        [2c76, 2c7d], [2c81, 2c81], [2c83, 2c83], [2c85, 2c85],
        [2c87, 2c87], [2c89, 2c89], [2c8b, 2c8b], [2c8d, 2c8d],
        [2c8f, 2c8f], [2c91, 2c91], [2c93, 2c93], [2c95, 2c95],
        [2c97, 2c97], [2c99, 2c99], [2c9b, 2c9b], [2c9d, 2c9d],
        [2c9f, 2c9f], [2ca1, 2ca1], [2ca3, 2ca3], [2ca5, 2ca5],
        [2ca7, 2ca7], [2ca9, 2ca9], [2cab, 2cab], [2cad, 2cad],
        [2caf, 2caf], [2cb1, 2cb1], [2cb3, 2cb3], [2cb5, 2cb5],
        [2cb7, 2cb7], [2cb9, 2cb9], [2cbb, 2cbb], [2cbd, 2cbd],
        [2cbf, 2cbf], [2cc1, 2cc1], [2cc3, 2cc3], [2cc5, 2cc5],
        [2cc7, 2cc7], [2cc9, 2cc9], [2ccb, 2ccb], [2ccd, 2ccd],
        [2ccf, 2ccf], [2cd1, 2cd1], [2cd3, 2cd3], [2cd5, 2cd5],
        [2cd7, 2cd7], [2cd9, 2cd9], [2cdb, 2cdb], [2cdd, 2cdd],
        [2cdf, 2cdf], [2ce1, 2ce1], [2ce3, 2cea], [2cec, 2cec],
        [2cee, 2cf1], [2cf3, a63f], [a641, a641], [a643, a643],
        [a645, a645], [a647, a647], [a649, a649], [a64b, a64b],
        [a64d, a64d], [a64f, a64f], [a651, a651], [a653, a653],
        [a655, a655], [a657, a657], [a659, a659], [a65b, a65b],
        [a65d, a65d], [a65f, a65f], [a661, a661], [a663, a663],
        [a665, a665], [a667, a667], [a669, a669], [a66b, a66b],
        [a66d, a67f], [a681, a681], [a683, a683], [a685, a685],
        [a687, a687], [a689, a689], [a68b, a68b], [a68d, a68d],
        [a68f, a68f], [a691, a691], [a693, a693], [a695, a695],
        [a697, a697], [a699, a699], [a69b, a721], [a723, a723],
        [a725, a725], [a727, a727], [a729, a729], [a72b, a72b],
        [a72d, a72d], [a72f, a731], [a733, a733], [a735, a735],
        [a737, a737], [a739, a739], [a73b, a73b], [a73d, a73d],
        [a73f, a73f], [a741, a741], [a743, a743], [a745, a745],
        [a747, a747], [a749, a749], [a74b, a74b], [a74d, a74d],
        [a74f, a74f], [a751, a751], [a753, a753], [a755, a755],
        [a757, a757], [a759, a759], [a75b, a75b], [a75d, a75d],
        [a75f, a75f], [a761, a761], [a763, a763], [a765, a765],
        [a767, a767], [a769, a769], [a76b, a76b], [a76d, a76d],
        [a76f, a778], [a77a, a77a], [a77c, a77c], [a77f, a77f],
        [a781, a781], [a783, a783], [a785, a785], [a787, a78a],
        [a78c, a78c], [a78e, a78f], [a791, a791], [a793, a795],
        [a797, a797], [a799, a799], [a79b, a79b], [a79d, a79d],
        [a79f, a79f], [a7a1, a7a1], [a7a3, a7a3], [a7a5, a7a5],
        [a7a7, a7a7], [a7a9, a7a9], [a7af, a7af], [a7b5, a7b5],
        [a7b7, ab6f], [abc0, ff20], [ff3b, 103ff], [10428, 104af],
        [104d4, 10c7f], [10cb3, 1189f], [118c0, 1e8ff], [1e922, 10ffff]**/
        
        
        namespace {
        const static UnicodeSet::run_t __reflexive_set_runs[] = {
        {Full, 2}, {Mixed, 1}, {Full, 2}, {Mixed, 2}, {Full, 1},
        {Mixed, 11}, {Full, 7}, {Mixed, 6}, {Empty, 1}, {Mixed, 1},
        {Full, 1}, {Mixed, 8}, {Full, 90}, {Empty, 1}, {Mixed, 1},
        {Full, 24}, {Mixed, 1}, {Full, 68}, {Mixed, 1}, {Full, 11},
        {Mixed, 16}, {Full, 9}, {Mixed, 1}, {Full, 1}, {Mixed, 2},
        {Full, 24}, {Mixed, 2}, {Full, 57}, {Empty, 1}, {Mixed, 1},
        {Full, 1}, {Mixed, 5}, {Full, 970}, {Mixed, 3}, {Full, 4},
        {Mixed, 5}, {Full, 29}, {Mixed, 1}, {Empty, 2}, {Full, 667},
        {Mixed, 1}, {Full, 38}, {Empty, 1}, {Mixed, 1}, {Full, 3},
        {Mixed, 2}, {Full, 61}, {Empty, 1}, {Mixed, 1}, {Full, 95},
        {Empty, 1}, {Full, 1666}, {Empty, 1}, {Mixed, 1}, {Full, 30902}};
        const static UnicodeSet::bitquad_t  __reflexive_set_quads[] = {
        0xf8000001, 0xffdfffff, 0x80800000, 0xaaaaaaaa, 0x55abaaaa,
        0xaaaaab55, 0x54aaaaaa, 0x4e243129, 0xee512d2a, 0xb555524f,
        0xaa29aaaa, 0xaaaaaaaa, 0x93faaaaa, 0xffffaa85, 0xffffffdf,
        0x7fbaffff, 0x000128bf, 0xfffff004, 0xaa9c7ffb, 0x194caaaa,
        0xffff0000, 0xaaaaaaaa, 0xaaaaabfe, 0xaaaaaaaa, 0xaaaad554,
        0xaaaaaaaa, 0xaaaaaaaa, 0x0001aaaa, 0xff800000, 0xffffdf40,
        0xc0ffffff, 0xfffffe00, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa,
        0xaaaaaaaa, 0xb7eaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa,
        0xc0ff00ff, 0x00ff00ff, 0x55ffc0ff, 0xffff00ff, 0x00ff00ff,
        0xa0ff00ff, 0xf0ffe0ff, 0xe0ffe0ff, 0xfffbf3bf, 0xffff0000,
        0xfffffff7, 0x003fffff, 0xffff0000, 0xffff8000, 0x3fda1562,
        0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xfffbd7fa, 0xaaaaaaaa,
        0xffffeaaa, 0xfaaaaaaa, 0xaaabaaab, 0xaaaaaaaa, 0x95ffaaaa,
        0xaabad7aa, 0xffa082aa, 0x0000ffff, 0xf8000001, 0xffffff00,
        0x0000ffff, 0xfff00000, 0xfff80000, 0xfffffffc};
        }

        const static UnicodeSet reflexive_set{const_cast<UnicodeSet::run_t *>(__reflexive_set_runs), 55, 0, const_cast<UnicodeSet::bitquad_t *>(__reflexive_set_quads), 74, 0};



        const unsigned buffer_length = 4958;
        const static char string_buffer LLVM_ALIGNAS(32) [5120] = u8R"__(a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
z
μ
à
á
â
ã
ä
å
æ
ç
è
é
ê
ë
ì
í
î
ï
ð
ñ
ò
ó
ô
õ
ö
ø
ù
ú
û
ü
ý
þ
ā
ă
ą
ć
ĉ
ċ
č
ď
đ
ē
ĕ
ė
ę
ě
ĝ
ğ
ġ
ģ
ĥ
ħ
ĩ
ī
ĭ
į
ĳ
ĵ
ķ
ĺ
ļ
ľ
ŀ
ł
ń
ņ
ň
ŋ
ō
ŏ
ő
œ
ŕ
ŗ
ř
ś
ŝ
ş
š
ţ
ť
ŧ
ũ
ū
ŭ
ů
ű
ų
ŵ
ŷ
ÿ
ź
ż
ž
s
ɓ
ƃ
ƅ
ɔ
ƈ
ɖ
ɗ
ƌ
ǝ
ə
ɛ
ƒ
ɠ
ɣ
ɩ
ɨ
ƙ
ɯ
ɲ
ɵ
ơ
ƣ
ƥ
ʀ
ƨ
ʃ
ƭ
ʈ
ư
ʊ
ʋ
ƴ
ƶ
ʒ
ƹ
ƽ
ǆ
ǆ
ǉ
ǉ
ǌ
ǌ
ǎ
ǐ
ǒ
ǔ
ǖ
ǘ
ǚ
ǜ
ǟ
ǡ
ǣ
ǥ
ǧ
ǩ
ǫ
ǭ
ǯ
ǳ
ǳ
ǵ
ƕ
ƿ
ǹ
ǻ
ǽ
ǿ
ȁ
ȃ
ȅ
ȇ
ȉ
ȋ
ȍ
ȏ
ȑ
ȓ
ȕ
ȗ
ș
ț
ȝ
ȟ
ƞ
ȣ
ȥ
ȧ
ȩ
ȫ
ȭ
ȯ
ȱ
ȳ
ⱥ
ȼ
ƚ
ⱦ
ɂ
ƀ
ʉ
ʌ
ɇ
ɉ
ɋ
ɍ
ɏ
ι
ͱ
ͳ
ͷ
ϳ
ά
έ
ή
ί
ό
ύ
ώ
α
β
γ
δ
ε
ζ
η
θ
ι
κ
λ
μ
ν
ξ
ο
π
ρ
σ
τ
υ
φ
χ
ψ
ω
ϊ
ϋ
σ
ϗ
β
θ
φ
π
ϙ
ϛ
ϝ
ϟ
ϡ
ϣ
ϥ
ϧ
ϩ
ϫ
ϭ
ϯ
κ
ρ
θ
ε
ϸ
ϲ
ϻ
ͻ
ͼ
ͽ
ѐ
ё
ђ
ѓ
є
ѕ
і
ї
ј
љ
њ
ћ
ќ
ѝ
ў
џ
а
б
в
г
д
е
ж
з
и
й
к
л
м
н
о
п
р
с
т
у
ф
х
ц
ч
ш
щ
ъ
ы
ь
э
ю
я
ѡ
ѣ
ѥ
ѧ
ѩ
ѫ
ѭ
ѯ
ѱ
ѳ
ѵ
ѷ
ѹ
ѻ
ѽ
ѿ
ҁ
ҋ
ҍ
ҏ
ґ
ғ
ҕ
җ
ҙ
қ
ҝ
ҟ
ҡ
ң
ҥ
ҧ
ҩ
ҫ
ҭ
ү
ұ
ҳ
ҵ
ҷ
ҹ
һ
ҽ
ҿ
ӏ
ӂ
ӄ
ӆ
ӈ
ӊ
ӌ
ӎ
ӑ
ӓ
ӕ
ӗ
ә
ӛ
ӝ
ӟ
ӡ
ӣ
ӥ
ӧ
ө
ӫ
ӭ
ӯ
ӱ
ӳ
ӵ
ӷ
ӹ
ӻ
ӽ
ӿ
ԁ
ԃ
ԅ
ԇ
ԉ
ԋ
ԍ
ԏ
ԑ
ԓ
ԕ
ԗ
ԙ
ԛ
ԝ
ԟ
ԡ
ԣ
ԥ
ԧ
ԩ
ԫ
ԭ
ԯ
ա
բ
գ
դ
ե
զ
է
ը
թ
ժ
ի
լ
խ
ծ
կ
հ
ձ
ղ
ճ
մ
յ
ն
շ
ո
չ
պ
ջ
ռ
ս
վ
տ
ր
ց
ւ
փ
ք
օ
ֆ
ⴀ
ⴁ
ⴂ
ⴃ
ⴄ
ⴅ
ⴆ
ⴇ
ⴈ
ⴉ
ⴊ
ⴋ
ⴌ
ⴍ
ⴎ
ⴏ
ⴐ
ⴑ
ⴒ
ⴓ
ⴔ
ⴕ
ⴖ
ⴗ
ⴘ
ⴙ
ⴚ
ⴛ
ⴜ
ⴝ
ⴞ
ⴟ
ⴠ
ⴡ
ⴢ
ⴣ
ⴤ
ⴥ
ⴧ
ⴭ
Ᏸ
Ᏹ
Ᏺ
Ᏻ
Ᏼ
Ᏽ
в
д
о
с
т
т
ъ
ѣ
ꙋ
ḁ
ḃ
ḅ
ḇ
ḉ
ḋ
ḍ
ḏ
ḑ
ḓ
ḕ
ḗ
ḙ
ḛ
ḝ
ḟ
ḡ
ḣ
ḥ
ḧ
ḩ
ḫ
ḭ
ḯ
ḱ
ḳ
ḵ
ḷ
ḹ
ḻ
ḽ
ḿ
ṁ
ṃ
ṅ
ṇ
ṉ
ṋ
ṍ
ṏ
ṑ
ṓ
ṕ
ṗ
ṙ
ṛ
ṝ
ṟ
ṡ
ṣ
ṥ
ṧ
ṩ
ṫ
ṭ
ṯ
ṱ
ṳ
ṵ
ṷ
ṹ
ṻ
ṽ
ṿ
ẁ
ẃ
ẅ
ẇ
ẉ
ẋ
ẍ
ẏ
ẑ
ẓ
ẕ
ṡ
ß
ạ
ả
ấ
ầ
ẩ
ẫ
ậ
ắ
ằ
ẳ
ẵ
ặ
ẹ
ẻ
ẽ
ế
ề
ể
ễ
ệ
ỉ
ị
ọ
ỏ
ố
ồ
ổ
ỗ
ộ
ớ
ờ
ở
ỡ
ợ
ụ
ủ
ứ
ừ
ử
ữ
ự
ỳ
ỵ
ỷ
ỹ
ỻ
ỽ
ỿ
ἀ
ἁ
ἂ
ἃ
ἄ
ἅ
ἆ
ἇ
ἐ
ἑ
ἒ
ἓ
ἔ
ἕ
ἠ
ἡ
ἢ
ἣ
ἤ
ἥ
ἦ
ἧ
ἰ
ἱ
ἲ
ἳ
ἴ
ἵ
ἶ
ἷ
ὀ
ὁ
ὂ
ὃ
ὄ
ὅ
ὑ
ὓ
ὕ
ὗ
ὠ
ὡ
ὢ
ὣ
ὤ
ὥ
ὦ
ὧ
ᾀ
ᾁ
ᾂ
ᾃ
ᾄ
ᾅ
ᾆ
ᾇ
ᾐ
ᾑ
ᾒ
ᾓ
ᾔ
ᾕ
ᾖ
ᾗ
ᾠ
ᾡ
ᾢ
ᾣ
ᾤ
ᾥ
ᾦ
ᾧ
ᾰ
ᾱ
ὰ
ά
ᾳ
ι
ὲ
έ
ὴ
ή
ῃ
ῐ
ῑ
ὶ
ί
ῠ
ῡ
ὺ
ύ
ῥ
ὸ
ό
ὼ
ώ
ῳ
ω
k
å
ⅎ
ⅰ
ⅱ
ⅲ
ⅳ
ⅴ
ⅵ
ⅶ
ⅷ
ⅸ
ⅹ
ⅺ
ⅻ
ⅼ
ⅽ
ⅾ
ⅿ
ↄ
ⓐ
ⓑ
ⓒ
ⓓ
ⓔ
ⓕ
ⓖ
ⓗ
ⓘ
ⓙ
ⓚ
ⓛ
ⓜ
ⓝ
ⓞ
ⓟ
ⓠ
ⓡ
ⓢ
ⓣ
ⓤ
ⓥ
ⓦ
ⓧ
ⓨ
ⓩ
ⰰ
ⰱ
ⰲ
ⰳ
ⰴ
ⰵ
ⰶ
ⰷ
ⰸ
ⰹ
ⰺ
ⰻ
ⰼ
ⰽ
ⰾ
ⰿ
ⱀ
ⱁ
ⱂ
ⱃ
ⱄ
ⱅ
ⱆ
ⱇ
ⱈ
ⱉ
ⱊ
ⱋ
ⱌ
ⱍ
ⱎ
ⱏ
ⱐ
ⱑ
ⱒ
ⱓ
ⱔ
ⱕ
ⱖ
ⱗ
ⱘ
ⱙ
ⱚ
ⱛ
ⱜ
ⱝ
ⱞ
ⱡ
ɫ
ᵽ
ɽ
ⱨ
ⱪ
ⱬ
ɑ
ɱ
ɐ
ɒ
ⱳ
ⱶ
ȿ
ɀ
ⲁ
ⲃ
ⲅ
ⲇ
ⲉ
ⲋ
ⲍ
ⲏ
ⲑ
ⲓ
ⲕ
ⲗ
ⲙ
ⲛ
ⲝ
ⲟ
ⲡ
ⲣ
ⲥ
ⲧ
ⲩ
ⲫ
ⲭ
ⲯ
ⲱ
ⲳ
ⲵ
ⲷ
ⲹ
ⲻ
ⲽ
ⲿ
ⳁ
ⳃ
ⳅ
ⳇ
ⳉ
ⳋ
ⳍ
ⳏ
ⳑ
ⳓ
ⳕ
ⳗ
ⳙ
ⳛ
ⳝ
ⳟ
ⳡ
ⳣ
ⳬ
ⳮ
ⳳ
ꙁ
ꙃ
ꙅ
ꙇ
ꙉ
ꙋ
ꙍ
ꙏ
ꙑ
ꙓ
ꙕ
ꙗ
ꙙ
ꙛ
ꙝ
ꙟ
ꙡ
ꙣ
ꙥ
ꙧ
ꙩ
ꙫ
ꙭ
ꚁ
ꚃ
ꚅ
ꚇ
ꚉ
ꚋ
ꚍ
ꚏ
ꚑ
ꚓ
ꚕ
ꚗ
ꚙ
ꚛ
ꜣ
ꜥ
ꜧ
ꜩ
ꜫ
ꜭ
ꜯ
ꜳ
ꜵ
ꜷ
ꜹ
ꜻ
ꜽ
ꜿ
ꝁ
ꝃ
ꝅ
ꝇ
ꝉ
ꝋ
ꝍ
ꝏ
ꝑ
ꝓ
ꝕ
ꝗ
ꝙ
ꝛ
ꝝ
ꝟ
ꝡ
ꝣ
ꝥ
ꝧ
ꝩ
ꝫ
ꝭ
ꝯ
ꝺ
ꝼ
ᵹ
ꝿ
ꞁ
ꞃ
ꞅ
ꞇ
ꞌ
ɥ
ꞑ
ꞓ
ꞗ
ꞙ
ꞛ
ꞝ
ꞟ
ꞡ
ꞣ
ꞥ
ꞧ
ꞩ
ɦ
ɜ
ɡ
ɬ
ɪ
ʞ
ʇ
ʝ
ꭓ
ꞵ
ꞷ
Ꭰ
Ꭱ
Ꭲ
Ꭳ
Ꭴ
Ꭵ
Ꭶ
Ꭷ
Ꭸ
Ꭹ
Ꭺ
Ꭻ
Ꭼ
Ꭽ
Ꭾ
Ꭿ
Ꮀ
Ꮁ
Ꮂ
Ꮃ
Ꮄ
Ꮅ
Ꮆ
Ꮇ
Ꮈ
Ꮉ
Ꮊ
Ꮋ
Ꮌ
Ꮍ
Ꮎ
Ꮏ
Ꮐ
Ꮑ
Ꮒ
Ꮓ
Ꮔ
Ꮕ
Ꮖ
Ꮗ
Ꮘ
Ꮙ
Ꮚ
Ꮛ
Ꮜ
Ꮝ
Ꮞ
Ꮟ
Ꮠ
Ꮡ
Ꮢ
Ꮣ
Ꮤ
Ꮥ
Ꮦ
Ꮧ
Ꮨ
Ꮩ
Ꮪ
Ꮫ
Ꮬ
Ꮭ
Ꮮ
Ꮯ
Ꮰ
Ꮱ
Ꮲ
Ꮳ
Ꮴ
Ꮵ
Ꮶ
Ꮷ
Ꮸ
Ꮹ
Ꮺ
Ꮻ
Ꮼ
Ꮽ
Ꮾ
Ꮿ
ａ
ｂ
ｃ
ｄ
ｅ
ｆ
ｇ
ｈ
ｉ
ｊ
ｋ
ｌ
ｍ
ｎ
ｏ
ｐ
ｑ
ｒ
ｓ
ｔ
ｕ
ｖ
ｗ
ｘ
ｙ
ｚ
𐐨
𐐩
𐐪
𐐫
𐐬
𐐭
𐐮
𐐯
𐐰
𐐱
𐐲
𐐳
𐐴
𐐵
𐐶
𐐷
𐐸
𐐹
𐐺
𐐻
𐐼
𐐽
𐐾
𐐿
𐑀
𐑁
𐑂
𐑃
𐑄
𐑅
𐑆
𐑇
𐑈
𐑉
𐑊
𐑋
𐑌
𐑍
𐑎
𐑏
𐓘
𐓙
𐓚
𐓛
𐓜
𐓝
𐓞
𐓟
𐓠
𐓡
𐓢
𐓣
𐓤
𐓥
𐓦
𐓧
𐓨
𐓩
𐓪
𐓫
𐓬
𐓭
𐓮
𐓯
𐓰
𐓱
𐓲
𐓳
𐓴
𐓵
𐓶
𐓷
𐓸
𐓹
𐓺
𐓻
𐳀
𐳁
𐳂
𐳃
𐳄
𐳅
𐳆
𐳇
𐳈
𐳉
𐳊
𐳋
𐳌
𐳍
𐳎
𐳏
𐳐
𐳑
𐳒
𐳓
𐳔
𐳕
𐳖
𐳗
𐳘
𐳙
𐳚
𐳛
𐳜
𐳝
𐳞
𐳟
𐳠
𐳡
𐳢
𐳣
𐳤
𐳥
𐳦
𐳧
𐳨
𐳩
𐳪
𐳫
𐳬
𐳭
𐳮
𐳯
𐳰
𐳱
𐳲
𑣀
𑣁
𑣂
𑣃
𑣄
𑣅
𑣆
𑣇
𑣈
𑣉
𑣊
𑣋
𑣌
𑣍
𑣎
𑣏
𑣐
𑣑
𑣒
𑣓
𑣔
𑣕
𑣖
𑣗
𑣘
𑣙
𑣚
𑣛
𑣜
𑣝
𑣞
𑣟
𞤢
𞤣
𞤤
𞤥
𞤦
𞤧
𞤨
𞤩
𞤪
𞤫
𞤬
𞤭
𞤮
𞤯
𞤰
𞤱
𞤲
𞤳
𞤴
𞤵
𞤶
𞤷
𞤸
𞤹
𞤺
𞤻
𞤼
𞤽
𞤾
𞤿
𞥀
𞥁
𞥂
𞥃
)__";

        const static std::vector<codepoint_t> defined_cps{
        0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048,
        0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f, 0x0050,
        0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058,
        0x0059, 0x005a, 0x00b5, 0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4,
        0x00c5, 0x00c6, 0x00c7, 0x00c8, 0x00c9, 0x00ca, 0x00cb, 0x00cc,
        0x00cd, 0x00ce, 0x00cf, 0x00d0, 0x00d1, 0x00d2, 0x00d3, 0x00d4,
        0x00d5, 0x00d6, 0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd,
        0x00de, 0x0100, 0x0102, 0x0104, 0x0106, 0x0108, 0x010a, 0x010c,
        0x010e, 0x0110, 0x0112, 0x0114, 0x0116, 0x0118, 0x011a, 0x011c,
        0x011e, 0x0120, 0x0122, 0x0124, 0x0126, 0x0128, 0x012a, 0x012c,
        0x012e, 0x0132, 0x0134, 0x0136, 0x0139, 0x013b, 0x013d, 0x013f,
        0x0141, 0x0143, 0x0145, 0x0147, 0x014a, 0x014c, 0x014e, 0x0150,
        0x0152, 0x0154, 0x0156, 0x0158, 0x015a, 0x015c, 0x015e, 0x0160,
        0x0162, 0x0164, 0x0166, 0x0168, 0x016a, 0x016c, 0x016e, 0x0170,
        0x0172, 0x0174, 0x0176, 0x0178, 0x0179, 0x017b, 0x017d, 0x017f,
        0x0181, 0x0182, 0x0184, 0x0186, 0x0187, 0x0189, 0x018a, 0x018b,
        0x018e, 0x018f, 0x0190, 0x0191, 0x0193, 0x0194, 0x0196, 0x0197,
        0x0198, 0x019c, 0x019d, 0x019f, 0x01a0, 0x01a2, 0x01a4, 0x01a6,
        0x01a7, 0x01a9, 0x01ac, 0x01ae, 0x01af, 0x01b1, 0x01b2, 0x01b3,
        0x01b5, 0x01b7, 0x01b8, 0x01bc, 0x01c4, 0x01c5, 0x01c7, 0x01c8,
        0x01ca, 0x01cb, 0x01cd, 0x01cf, 0x01d1, 0x01d3, 0x01d5, 0x01d7,
        0x01d9, 0x01db, 0x01de, 0x01e0, 0x01e2, 0x01e4, 0x01e6, 0x01e8,
        0x01ea, 0x01ec, 0x01ee, 0x01f1, 0x01f2, 0x01f4, 0x01f6, 0x01f7,
        0x01f8, 0x01fa, 0x01fc, 0x01fe, 0x0200, 0x0202, 0x0204, 0x0206,
        0x0208, 0x020a, 0x020c, 0x020e, 0x0210, 0x0212, 0x0214, 0x0216,
        0x0218, 0x021a, 0x021c, 0x021e, 0x0220, 0x0222, 0x0224, 0x0226,
        0x0228, 0x022a, 0x022c, 0x022e, 0x0230, 0x0232, 0x023a, 0x023b,
        0x023d, 0x023e, 0x0241, 0x0243, 0x0244, 0x0245, 0x0246, 0x0248,
        0x024a, 0x024c, 0x024e, 0x0345, 0x0370, 0x0372, 0x0376, 0x037f,
        0x0386, 0x0388, 0x0389, 0x038a, 0x038c, 0x038e, 0x038f, 0x0391,
        0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399,
        0x039a, 0x039b, 0x039c, 0x039d, 0x039e, 0x039f, 0x03a0, 0x03a1,
        0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7, 0x03a8, 0x03a9, 0x03aa,
        0x03ab, 0x03c2, 0x03cf, 0x03d0, 0x03d1, 0x03d5, 0x03d6, 0x03d8,
        0x03da, 0x03dc, 0x03de, 0x03e0, 0x03e2, 0x03e4, 0x03e6, 0x03e8,
        0x03ea, 0x03ec, 0x03ee, 0x03f0, 0x03f1, 0x03f4, 0x03f5, 0x03f7,
        0x03f9, 0x03fa, 0x03fd, 0x03fe, 0x03ff, 0x0400, 0x0401, 0x0402,
        0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 0x0408, 0x0409, 0x040a,
        0x040b, 0x040c, 0x040d, 0x040e, 0x040f, 0x0410, 0x0411, 0x0412,
        0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041a,
        0x041b, 0x041c, 0x041d, 0x041e, 0x041f, 0x0420, 0x0421, 0x0422,
        0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042a,
        0x042b, 0x042c, 0x042d, 0x042e, 0x042f, 0x0460, 0x0462, 0x0464,
        0x0466, 0x0468, 0x046a, 0x046c, 0x046e, 0x0470, 0x0472, 0x0474,
        0x0476, 0x0478, 0x047a, 0x047c, 0x047e, 0x0480, 0x048a, 0x048c,
        0x048e, 0x0490, 0x0492, 0x0494, 0x0496, 0x0498, 0x049a, 0x049c,
        0x049e, 0x04a0, 0x04a2, 0x04a4, 0x04a6, 0x04a8, 0x04aa, 0x04ac,
        0x04ae, 0x04b0, 0x04b2, 0x04b4, 0x04b6, 0x04b8, 0x04ba, 0x04bc,
        0x04be, 0x04c0, 0x04c1, 0x04c3, 0x04c5, 0x04c7, 0x04c9, 0x04cb,
        0x04cd, 0x04d0, 0x04d2, 0x04d4, 0x04d6, 0x04d8, 0x04da, 0x04dc,
        0x04de, 0x04e0, 0x04e2, 0x04e4, 0x04e6, 0x04e8, 0x04ea, 0x04ec,
        0x04ee, 0x04f0, 0x04f2, 0x04f4, 0x04f6, 0x04f8, 0x04fa, 0x04fc,
        0x04fe, 0x0500, 0x0502, 0x0504, 0x0506, 0x0508, 0x050a, 0x050c,
        0x050e, 0x0510, 0x0512, 0x0514, 0x0516, 0x0518, 0x051a, 0x051c,
        0x051e, 0x0520, 0x0522, 0x0524, 0x0526, 0x0528, 0x052a, 0x052c,
        0x052e, 0x0531, 0x0532, 0x0533, 0x0534, 0x0535, 0x0536, 0x0537,
        0x0538, 0x0539, 0x053a, 0x053b, 0x053c, 0x053d, 0x053e, 0x053f,
        0x0540, 0x0541, 0x0542, 0x0543, 0x0544, 0x0545, 0x0546, 0x0547,
        0x0548, 0x0549, 0x054a, 0x054b, 0x054c, 0x054d, 0x054e, 0x054f,
        0x0550, 0x0551, 0x0552, 0x0553, 0x0554, 0x0555, 0x0556, 0x10a0,
        0x10a1, 0x10a2, 0x10a3, 0x10a4, 0x10a5, 0x10a6, 0x10a7, 0x10a8,
        0x10a9, 0x10aa, 0x10ab, 0x10ac, 0x10ad, 0x10ae, 0x10af, 0x10b0,
        0x10b1, 0x10b2, 0x10b3, 0x10b4, 0x10b5, 0x10b6, 0x10b7, 0x10b8,
        0x10b9, 0x10ba, 0x10bb, 0x10bc, 0x10bd, 0x10be, 0x10bf, 0x10c0,
        0x10c1, 0x10c2, 0x10c3, 0x10c4, 0x10c5, 0x10c7, 0x10cd, 0x13f8,
        0x13f9, 0x13fa, 0x13fb, 0x13fc, 0x13fd, 0x1c80, 0x1c81, 0x1c82,
        0x1c83, 0x1c84, 0x1c85, 0x1c86, 0x1c87, 0x1c88, 0x1e00, 0x1e02,
        0x1e04, 0x1e06, 0x1e08, 0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12,
        0x1e14, 0x1e16, 0x1e18, 0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22,
        0x1e24, 0x1e26, 0x1e28, 0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32,
        0x1e34, 0x1e36, 0x1e38, 0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42,
        0x1e44, 0x1e46, 0x1e48, 0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52,
        0x1e54, 0x1e56, 0x1e58, 0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62,
        0x1e64, 0x1e66, 0x1e68, 0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72,
        0x1e74, 0x1e76, 0x1e78, 0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82,
        0x1e84, 0x1e86, 0x1e88, 0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92,
        0x1e94, 0x1e9b, 0x1e9e, 0x1ea0, 0x1ea2, 0x1ea4, 0x1ea6, 0x1ea8,
        0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2, 0x1eb4, 0x1eb6, 0x1eb8,
        0x1eba, 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2, 0x1ec4, 0x1ec6, 0x1ec8,
        0x1eca, 0x1ecc, 0x1ece, 0x1ed0, 0x1ed2, 0x1ed4, 0x1ed6, 0x1ed8,
        0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2, 0x1ee4, 0x1ee6, 0x1ee8,
        0x1eea, 0x1eec, 0x1eee, 0x1ef0, 0x1ef2, 0x1ef4, 0x1ef6, 0x1ef8,
        0x1efa, 0x1efc, 0x1efe, 0x1f08, 0x1f09, 0x1f0a, 0x1f0b, 0x1f0c,
        0x1f0d, 0x1f0e, 0x1f0f, 0x1f18, 0x1f19, 0x1f1a, 0x1f1b, 0x1f1c,
        0x1f1d, 0x1f28, 0x1f29, 0x1f2a, 0x1f2b, 0x1f2c, 0x1f2d, 0x1f2e,
        0x1f2f, 0x1f38, 0x1f39, 0x1f3a, 0x1f3b, 0x1f3c, 0x1f3d, 0x1f3e,
        0x1f3f, 0x1f48, 0x1f49, 0x1f4a, 0x1f4b, 0x1f4c, 0x1f4d, 0x1f59,
        0x1f5b, 0x1f5d, 0x1f5f, 0x1f68, 0x1f69, 0x1f6a, 0x1f6b, 0x1f6c,
        0x1f6d, 0x1f6e, 0x1f6f, 0x1f88, 0x1f89, 0x1f8a, 0x1f8b, 0x1f8c,
        0x1f8d, 0x1f8e, 0x1f8f, 0x1f98, 0x1f99, 0x1f9a, 0x1f9b, 0x1f9c,
        0x1f9d, 0x1f9e, 0x1f9f, 0x1fa8, 0x1fa9, 0x1faa, 0x1fab, 0x1fac,
        0x1fad, 0x1fae, 0x1faf, 0x1fb8, 0x1fb9, 0x1fba, 0x1fbb, 0x1fbc,
        0x1fbe, 0x1fc8, 0x1fc9, 0x1fca, 0x1fcb, 0x1fcc, 0x1fd8, 0x1fd9,
        0x1fda, 0x1fdb, 0x1fe8, 0x1fe9, 0x1fea, 0x1feb, 0x1fec, 0x1ff8,
        0x1ff9, 0x1ffa, 0x1ffb, 0x1ffc, 0x2126, 0x212a, 0x212b, 0x2132,
        0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167,
        0x2168, 0x2169, 0x216a, 0x216b, 0x216c, 0x216d, 0x216e, 0x216f,
        0x2183, 0x24b6, 0x24b7, 0x24b8, 0x24b9, 0x24ba, 0x24bb, 0x24bc,
        0x24bd, 0x24be, 0x24bf, 0x24c0, 0x24c1, 0x24c2, 0x24c3, 0x24c4,
        0x24c5, 0x24c6, 0x24c7, 0x24c8, 0x24c9, 0x24ca, 0x24cb, 0x24cc,
        0x24cd, 0x24ce, 0x24cf, 0x2c00, 0x2c01, 0x2c02, 0x2c03, 0x2c04,
        0x2c05, 0x2c06, 0x2c07, 0x2c08, 0x2c09, 0x2c0a, 0x2c0b, 0x2c0c,
        0x2c0d, 0x2c0e, 0x2c0f, 0x2c10, 0x2c11, 0x2c12, 0x2c13, 0x2c14,
        0x2c15, 0x2c16, 0x2c17, 0x2c18, 0x2c19, 0x2c1a, 0x2c1b, 0x2c1c,
        0x2c1d, 0x2c1e, 0x2c1f, 0x2c20, 0x2c21, 0x2c22, 0x2c23, 0x2c24,
        0x2c25, 0x2c26, 0x2c27, 0x2c28, 0x2c29, 0x2c2a, 0x2c2b, 0x2c2c,
        0x2c2d, 0x2c2e, 0x2c60, 0x2c62, 0x2c63, 0x2c64, 0x2c67, 0x2c69,
        0x2c6b, 0x2c6d, 0x2c6e, 0x2c6f, 0x2c70, 0x2c72, 0x2c75, 0x2c7e,
        0x2c7f, 0x2c80, 0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c,
        0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c,
        0x2c9e, 0x2ca0, 0x2ca2, 0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac,
        0x2cae, 0x2cb0, 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc,
        0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4, 0x2cc6, 0x2cc8, 0x2cca, 0x2ccc,
        0x2cce, 0x2cd0, 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc,
        0x2cde, 0x2ce0, 0x2ce2, 0x2ceb, 0x2ced, 0x2cf2, 0xa640, 0xa642,
        0xa644, 0xa646, 0xa648, 0xa64a, 0xa64c, 0xa64e, 0xa650, 0xa652,
        0xa654, 0xa656, 0xa658, 0xa65a, 0xa65c, 0xa65e, 0xa660, 0xa662,
        0xa664, 0xa666, 0xa668, 0xa66a, 0xa66c, 0xa680, 0xa682, 0xa684,
        0xa686, 0xa688, 0xa68a, 0xa68c, 0xa68e, 0xa690, 0xa692, 0xa694,
        0xa696, 0xa698, 0xa69a, 0xa722, 0xa724, 0xa726, 0xa728, 0xa72a,
        0xa72c, 0xa72e, 0xa732, 0xa734, 0xa736, 0xa738, 0xa73a, 0xa73c,
        0xa73e, 0xa740, 0xa742, 0xa744, 0xa746, 0xa748, 0xa74a, 0xa74c,
        0xa74e, 0xa750, 0xa752, 0xa754, 0xa756, 0xa758, 0xa75a, 0xa75c,
        0xa75e, 0xa760, 0xa762, 0xa764, 0xa766, 0xa768, 0xa76a, 0xa76c,
        0xa76e, 0xa779, 0xa77b, 0xa77d, 0xa77e, 0xa780, 0xa782, 0xa784,
        0xa786, 0xa78b, 0xa78d, 0xa790, 0xa792, 0xa796, 0xa798, 0xa79a,
        0xa79c, 0xa79e, 0xa7a0, 0xa7a2, 0xa7a4, 0xa7a6, 0xa7a8, 0xa7aa,
        0xa7ab, 0xa7ac, 0xa7ad, 0xa7ae, 0xa7b0, 0xa7b1, 0xa7b2, 0xa7b3,
        0xa7b4, 0xa7b6, 0xab70, 0xab71, 0xab72, 0xab73, 0xab74, 0xab75,
        0xab76, 0xab77, 0xab78, 0xab79, 0xab7a, 0xab7b, 0xab7c, 0xab7d,
        0xab7e, 0xab7f, 0xab80, 0xab81, 0xab82, 0xab83, 0xab84, 0xab85,
        0xab86, 0xab87, 0xab88, 0xab89, 0xab8a, 0xab8b, 0xab8c, 0xab8d,
        0xab8e, 0xab8f, 0xab90, 0xab91, 0xab92, 0xab93, 0xab94, 0xab95,
        0xab96, 0xab97, 0xab98, 0xab99, 0xab9a, 0xab9b, 0xab9c, 0xab9d,
        0xab9e, 0xab9f, 0xaba0, 0xaba1, 0xaba2, 0xaba3, 0xaba4, 0xaba5,
        0xaba6, 0xaba7, 0xaba8, 0xaba9, 0xabaa, 0xabab, 0xabac, 0xabad,
        0xabae, 0xabaf, 0xabb0, 0xabb1, 0xabb2, 0xabb3, 0xabb4, 0xabb5,
        0xabb6, 0xabb7, 0xabb8, 0xabb9, 0xabba, 0xabbb, 0xabbc, 0xabbd,
        0xabbe, 0xabbf, 0xff21, 0xff22, 0xff23, 0xff24, 0xff25, 0xff26,
        0xff27, 0xff28, 0xff29, 0xff2a, 0xff2b, 0xff2c, 0xff2d, 0xff2e,
        0xff2f, 0xff30, 0xff31, 0xff32, 0xff33, 0xff34, 0xff35, 0xff36,
        0xff37, 0xff38, 0xff39, 0xff3a, 0x10400, 0x10401, 0x10402, 0x10403,
        0x10404, 0x10405, 0x10406, 0x10407, 0x10408, 0x10409, 0x1040a,
        0x1040b, 0x1040c, 0x1040d, 0x1040e, 0x1040f, 0x10410, 0x10411,
        0x10412, 0x10413, 0x10414, 0x10415, 0x10416, 0x10417, 0x10418,
        0x10419, 0x1041a, 0x1041b, 0x1041c, 0x1041d, 0x1041e, 0x1041f,
        0x10420, 0x10421, 0x10422, 0x10423, 0x10424, 0x10425, 0x10426,
        0x10427, 0x104b0, 0x104b1, 0x104b2, 0x104b3, 0x104b4, 0x104b5,
        0x104b6, 0x104b7, 0x104b8, 0x104b9, 0x104ba, 0x104bb, 0x104bc,
        0x104bd, 0x104be, 0x104bf, 0x104c0, 0x104c1, 0x104c2, 0x104c3,
        0x104c4, 0x104c5, 0x104c6, 0x104c7, 0x104c8, 0x104c9, 0x104ca,
        0x104cb, 0x104cc, 0x104cd, 0x104ce, 0x104cf, 0x104d0, 0x104d1,
        0x104d2, 0x104d3, 0x10c80, 0x10c81, 0x10c82, 0x10c83, 0x10c84,
        0x10c85, 0x10c86, 0x10c87, 0x10c88, 0x10c89, 0x10c8a, 0x10c8b,
        0x10c8c, 0x10c8d, 0x10c8e, 0x10c8f, 0x10c90, 0x10c91, 0x10c92,
        0x10c93, 0x10c94, 0x10c95, 0x10c96, 0x10c97, 0x10c98, 0x10c99,
        0x10c9a, 0x10c9b, 0x10c9c, 0x10c9d, 0x10c9e, 0x10c9f, 0x10ca0,
        0x10ca1, 0x10ca2, 0x10ca3, 0x10ca4, 0x10ca5, 0x10ca6, 0x10ca7,
        0x10ca8, 0x10ca9, 0x10caa, 0x10cab, 0x10cac, 0x10cad, 0x10cae,
        0x10caf, 0x10cb0, 0x10cb1, 0x10cb2, 0x118a0, 0x118a1, 0x118a2,
        0x118a3, 0x118a4, 0x118a5, 0x118a6, 0x118a7, 0x118a8, 0x118a9,
        0x118aa, 0x118ab, 0x118ac, 0x118ad, 0x118ae, 0x118af, 0x118b0,
        0x118b1, 0x118b2, 0x118b3, 0x118b4, 0x118b5, 0x118b6, 0x118b7,
        0x118b8, 0x118b9, 0x118ba, 0x118bb, 0x118bc, 0x118bd, 0x118be,
        0x118bf, 0x1e900, 0x1e901, 0x1e902, 0x1e903, 0x1e904, 0x1e905,
        0x1e906, 0x1e907, 0x1e908, 0x1e909, 0x1e90a, 0x1e90b, 0x1e90c,
        0x1e90d, 0x1e90e, 0x1e90f, 0x1e910, 0x1e911, 0x1e912, 0x1e913,
        0x1e914, 0x1e915, 0x1e916, 0x1e917, 0x1e918, 0x1e919, 0x1e91a,
        0x1e91b, 0x1e91c, 0x1e91d, 0x1e91e, 0x1e91f, 0x1e920, 0x1e921};
        static StringPropertyObject property_object(scf, 
                                                    std::move(null_codepoint_set), 
                                                    std::move(reflexive_set), 
                                                    static_cast<const char *>(string_buffer), 
                                                    buffer_length, 
                                                    std::move(defined_cps));
    }
    namespace CF_ns {
        /** Code Point Ranges for cf (possibly overriding values from SCF)
        [00df, 00df], [0130, 0130], [0149, 0149], [01f0, 01f0],
        [0390, 0390], [03b0, 03b0], [0587, 0587], [1e96, 1e9a],
        [1e9e, 1e9e], [1f50, 1f50], [1f52, 1f52], [1f54, 1f54],
        [1f56, 1f56], [1f80, 1faf], [1fb2, 1fb4], [1fb6, 1fb7],
        [1fbc, 1fbc], [1fc2, 1fc4], [1fc6, 1fc7], [1fcc, 1fcc],
        [1fd2, 1fd3], [1fd6, 1fd7], [1fe2, 1fe4], [1fe6, 1fe7],
        [1ff2, 1ff4], [1ff6, 1ff7], [1ffc, 1ffc], [fb00, fb06],
        [fb13, fb17]**/

        
        namespace {
        const static UnicodeSet::run_t __explicitly_defined_set_runs[] = {
        {Empty, 6}, {Mixed, 1}, {Empty, 2}, {Mixed, 2}, {Empty, 4},
        {Mixed, 1}, {Empty, 12}, {Mixed, 2}, {Empty, 14}, {Mixed, 1},
        {Empty, 199}, {Mixed, 1}, {Empty, 5}, {Mixed, 1}, {Empty, 1},
        {Full, 1}, {Mixed, 3}, {Empty, 1752}, {Mixed, 1}, {Empty, 32807}};
        const static UnicodeSet::bitquad_t  __explicitly_defined_set_quads[] = {
        0x80000000, 0x00010000, 0x00000200, 0x00010000, 0x00010000,
        0x00010000, 0x00000080, 0x47c00000, 0x00550000, 0x10dcffff,
        0x00cc10dc, 0x10dc00dc, 0x00f8007f};
        }

        const static UnicodeSet explicitly_defined_set{const_cast<UnicodeSet::run_t *>(__explicitly_defined_set_runs), 20, 0, const_cast<UnicodeSet::bitquad_t *>(__explicitly_defined_set_quads), 13, 0};



        const unsigned buffer_length = 575;
        const static char string_buffer LLVM_ALIGNAS(32) [768] = u8R"__(ss
i̇
ʼn
ǰ
ΐ
ΰ
եւ
ẖ
ẗ
ẘ
ẙ
aʾ
ss
ὐ
ὒ
ὔ
ὖ
ἀι
ἁι
ἂι
ἃι
ἄι
ἅι
ἆι
ἇι
ἀι
ἁι
ἂι
ἃι
ἄι
ἅι
ἆι
ἇι
ἠι
ἡι
ἢι
ἣι
ἤι
ἥι
ἦι
ἧι
ἠι
ἡι
ἢι
ἣι
ἤι
ἥι
ἦι
ἧι
ὠι
ὡι
ὢι
ὣι
ὤι
ὥι
ὦι
ὧι
ὠι
ὡι
ὢι
ὣι
ὤι
ὥι
ὦι
ὧι
ὰι
αι
άι
ᾶ
ᾶι
αι
ὴι
ηι
ήι
ῆ
ῆι
ηι
ῒ
ΐ
ῖ
ῗ
ῢ
ΰ
ῤ
ῦ
ῧ
ὼι
ωι
ώι
ῶ
ῶι
ωι
ff
fi
fl
ffi
ffl
st
st
մն
մե
մի
վն
մխ
)__";

        const static std::vector<codepoint_t> defined_cps{
        0x00df, 0x0130, 0x0149, 0x01f0, 0x0390, 0x03b0, 0x0587, 0x1e96,
        0x1e97, 0x1e98, 0x1e99, 0x1e9a, 0x1e9e, 0x1f50, 0x1f52, 0x1f54,
        0x1f56, 0x1f80, 0x1f81, 0x1f82, 0x1f83, 0x1f84, 0x1f85, 0x1f86,
        0x1f87, 0x1f88, 0x1f89, 0x1f8a, 0x1f8b, 0x1f8c, 0x1f8d, 0x1f8e,
        0x1f8f, 0x1f90, 0x1f91, 0x1f92, 0x1f93, 0x1f94, 0x1f95, 0x1f96,
        0x1f97, 0x1f98, 0x1f99, 0x1f9a, 0x1f9b, 0x1f9c, 0x1f9d, 0x1f9e,
        0x1f9f, 0x1fa0, 0x1fa1, 0x1fa2, 0x1fa3, 0x1fa4, 0x1fa5, 0x1fa6,
        0x1fa7, 0x1fa8, 0x1fa9, 0x1faa, 0x1fab, 0x1fac, 0x1fad, 0x1fae,
        0x1faf, 0x1fb2, 0x1fb3, 0x1fb4, 0x1fb6, 0x1fb7, 0x1fbc, 0x1fc2,
        0x1fc3, 0x1fc4, 0x1fc6, 0x1fc7, 0x1fcc, 0x1fd2, 0x1fd3, 0x1fd6,
        0x1fd7, 0x1fe2, 0x1fe3, 0x1fe4, 0x1fe6, 0x1fe7, 0x1ff2, 0x1ff3,
        0x1ff4, 0x1ff6, 0x1ff7, 0x1ffc, 0xfb00, 0xfb01, 0xfb02, 0xfb03,
        0xfb04, 0xfb05, 0xfb06, 0xfb13, 0xfb14, 0xfb15, 0xfb16, 0xfb17};
        static StringOverridePropertyObject property_object(cf, 
                                                    SCF_ns::property_object, 
                                                    std::move(explicitly_defined_set), 
                                                    static_cast<const char *>(string_buffer), 
                                                    buffer_length, 
                                                    std::move(defined_cps));
    }
}

#endif
